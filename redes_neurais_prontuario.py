# -*- coding: utf-8 -*-
"""Redes Neurais_Doencas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJzVfCLxdnBcLpVBPorOd_JPYyGw6qei

MSc. Eng. Ailton J. Santos

Building a machine learning model, in this case a neural network, capable of analyzing a comprehensive data set of electronic patient records

*Geração dos Dados Fictícios*
"""

import csv
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

n_pacientes = 3000

# Criando arrays para armazenar características e variáveis alvo
idades = np.random.randint(18, 81, size=n_pacientes)
sexos = np.random.choice(["M", "F"], size=n_pacientes)
hist_hipertensao = np.random.choice(["Sim", "Não"], size=n_pacientes)
hist_diabetes = np.random.choice(["Sim", "Não"], size=n_pacientes)
colesterol = np.random.randint(100, 301, size=n_pacientes)
glicemia = np.random.randint(70, 201, size=n_pacientes)
pas_sistolica = np.random.randint(90, 201, size=n_pacientes)
pas_diastolica = np.random.randint(60, 111, size=n_pacientes)
tabagismo = np.random.choice(["Sim", "Não"], size=n_pacientes)
etilismo = np.random.choice(["Sim", "Não"], size=n_pacientes)

# Calculando risco de doença cardiovascular (baseado em fatores de risco)
risco_cardiovascular = 0.5 * (idades >= 65) + 0.3 * (hist_hipertensao == "Sim") + 0.2 * (colesterol >= 240) + 0.1 * (tabagismo == "Sim")
risco_cardiovascular = np.clip(risco_cardiovascular, 0, 1) * 100

# Calculando risco de diabetes mellitus tipo 2 (baseado em fatores de risco)
risco_diabetes = 0.4 * (idades >= 45) + 0.3 * (hist_diabetes == "Sim") + 0.2 * (glicemia >= 126) + 0.1 * (etilismo == "Sim")
risco_diabetes = np.clip(risco_diabetes, 0, 1) * 100

# Combinando características e variáveis alvo em arrays NumPy
dados = np.vstack([idades,
                   sexos,
                   hist_hipertensao,
                   hist_diabetes,
                   colesterol,
                   glicemia,
                   pas_sistolica,
                   pas_diastolica,
                   tabagismo,
                   etilismo,
                   risco_cardiovascular,
                   risco_diabetes]).T

# Salvando os dados em um arquivo CSV
header = ["idades", "sexos", "hist_hipertensao", "hist_diabetes", "colesterol", "glicemia", "pas_sistolica", "pas_diastolica", "tabagismo", "etilismo", "risco_cardiovascular", "risco_diabetes"]
df = pd.DataFrame(dados, columns=header)
df.to_csv("dados_risco_doencas.csv", index=False)

print("Dados fictícios gerados com sucesso para 3.000 pacientes!")

"""*Preparação dos Dados*"""

# Carregar dados do arquivo CSV
df = pd.read_csv("dados_risco_doencas.csv")

# Codificação de variáveis categóricas
label_encoder = LabelEncoder()
df['sexos'] = label_encoder.fit_transform(df['sexos'])
df['hist_hipertensao'] = label_encoder.fit_transform(df['hist_hipertensao'])
df['hist_diabetes'] = label_encoder.fit_transform(df['hist_diabetes'])
df['tabagismo'] = label_encoder.fit_transform(df['tabagismo'])
df['etilismo'] = label_encoder.fit_transform(df['etilismo'])

# Separar características e variáveis alvo
X = df.drop(columns=['risco_cardiovascular', 'risco_diabetes'])
y_cardiovascular = df['risco_cardiovascular']
y_diabetes = df['risco_diabetes']

# Dividir os dados em conjuntos de treinamento e teste
X_train, X_test, y_train_cardiovascular, y_test_cardiovascular = train_test_split(X, y_cardiovascular, test_size=0.2, random_state=42)
X_train, X_test, y_train_diabetes, y_test_diabetes = train_test_split(X, y_diabetes, test_size=0.2, random_state=42)

# Normalizar os dados
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""*Construção e Treinamento do Modelo*"""

# Definir arquitetura do modelo
def create_model(input_shape):
    model = Sequential([
        Dense(64, input_dim=input_shape, activation='relu'),
        Dense(32, activation='relu'),
        Dense(16, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_absolute_error'])
    return model

# Criar modelos para as duas variáveis alvo
model_cardiovascular = create_model(X_train.shape[1])
model_diabetes = create_model(X_train.shape[1])

# Treinar modelo para risco cardiovascular
history_cardiovascular = model_cardiovascular.fit(X_train, y_train_cardiovascular, epochs=50, batch_size=32, validation_split=0.2)

# Treinar modelo para risco de diabetes
history_diabetes = model_diabetes.fit(X_train, y_train_diabetes, epochs=50, batch_size=32, validation_split=0.2)

Avaliação dos Modelos

# Avaliar modelo para risco cardiovascular
loss_cardiovascular, mae_cardiovascular = model_cardiovascular.evaluate(X_test, y_test_cardiovascular)
print(f"Perda (Cardiovascular): {loss_cardiovascular}, Erro Médio Absoluto (Cardiovascular): {mae_cardiovascular}")

# Avaliar modelo para risco de diabetes
loss_diabetes, mae_diabetes = model_diabetes.evaluate(X_test, y_test_diabetes)
print(f"Perda (Diabetes): {loss_diabetes}, Erro Médio Absoluto (Diabetes): {mae_diabetes}")